// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * FileDatasetVersion Definition.
 */
@Fluent
public final class FileDatasetVersion extends DatasetVersion {

    /*
     * Dataset type
     */
    @Generated
    private DatasetType type = DatasetType.URI_FILE;

    /*
     * Indicates OpenAI Purpose. FileDatasets created with this field will be compatible with OpenAI-specific features
     */
    @Generated
    private final String openAIPurpose;

    /**
     * Creates an instance of FileDatasetVersion class.
     *
     * @param datasetUri the datasetUri value to set.
     * @param openAIPurpose the openAIPurpose value to set.
     */
    @Generated
    public FileDatasetVersion(String datasetUri, String openAIPurpose) {
        super(datasetUri);
        this.openAIPurpose = openAIPurpose;
    }

    /**
     * Get the type property: Dataset type.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public DatasetType getType() {
        return this.type;
    }

    /**
     * Get the openAIPurpose property: Indicates OpenAI Purpose. FileDatasets created with this field will be compatible
     * with OpenAI-specific features.
     *
     * @return the openAIPurpose value.
     */
    @Generated
    public String getOpenAIPurpose() {
        return this.openAIPurpose;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FileDatasetVersion setStage(String stage) {
        super.setStage(stage);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FileDatasetVersion setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FileDatasetVersion setTags(Map<String, String> tags) {
        super.setTags(tags);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("datasetUri", getDatasetUri());
        jsonWriter.writeStringField("stage", getStage());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeMapField("tags", getTags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("openAIPurpose", this.openAIPurpose);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileDatasetVersion from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileDatasetVersion if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FileDatasetVersion.
     */
    @Generated
    public static FileDatasetVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String datasetUri = null;
            String name = null;
            String version = null;
            Boolean isReference = null;
            String stage = null;
            String id = null;
            String description = null;
            Map<String, String> tags = null;
            String openAIPurpose = null;
            DatasetType type = DatasetType.URI_FILE;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("datasetUri".equals(fieldName)) {
                    datasetUri = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else if ("isReference".equals(fieldName)) {
                    isReference = reader.getNullable(JsonReader::getBoolean);
                } else if ("stage".equals(fieldName)) {
                    stage = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("openAIPurpose".equals(fieldName)) {
                    openAIPurpose = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = DatasetType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            FileDatasetVersion deserializedFileDatasetVersion = new FileDatasetVersion(datasetUri, openAIPurpose);
            deserializedFileDatasetVersion.setName(name);
            deserializedFileDatasetVersion.setVersion(version);
            deserializedFileDatasetVersion.setIsReference(isReference);
            deserializedFileDatasetVersion.setStage(stage);
            deserializedFileDatasetVersion.setId(id);
            deserializedFileDatasetVersion.setDescription(description);
            deserializedFileDatasetVersion.setTags(tags);
            deserializedFileDatasetVersion.type = type;
            return deserializedFileDatasetVersion;
        });
    }
}
