// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Managed Azure AI Search Index Definition.
 */
@Fluent
public final class ManagedAzureAISearchIndex extends Index {

    /*
     * Type of index
     */
    @Generated
    private IndexType type = IndexType.MANAGED_AZURE_SEARCH;

    /*
     * Vector store id of managed index
     */
    @Generated
    private final String vectorStoreId;

    /**
     * Creates an instance of ManagedAzureAISearchIndex class.
     *
     * @param vectorStoreId the vectorStoreId value to set.
     */
    @Generated
    public ManagedAzureAISearchIndex(String vectorStoreId) {
        this.vectorStoreId = vectorStoreId;
    }

    /**
     * Get the type property: Type of index.
     *
     * @return the type value.
     */
    @Generated
    @Override
    public IndexType getType() {
        return this.type;
    }

    /**
     * Get the vectorStoreId property: Vector store id of managed index.
     *
     * @return the vectorStoreId value.
     */
    @Generated
    public String getVectorStoreId() {
        return this.vectorStoreId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ManagedAzureAISearchIndex setStage(String stage) {
        super.setStage(stage);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ManagedAzureAISearchIndex setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public ManagedAzureAISearchIndex setTags(Map<String, String> tags) {
        super.setTags(tags);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("stage", getStage());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeMapField("tags", getTags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("vectorStoreId", this.vectorStoreId);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedAzureAISearchIndex from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedAzureAISearchIndex if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedAzureAISearchIndex.
     */
    @Generated
    public static ManagedAzureAISearchIndex fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String version = null;
            String stage = null;
            String id = null;
            String description = null;
            Map<String, String> tags = null;
            String vectorStoreId = null;
            IndexType type = IndexType.MANAGED_AZURE_SEARCH;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else if ("stage".equals(fieldName)) {
                    stage = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("vectorStoreId".equals(fieldName)) {
                    vectorStoreId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = IndexType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            ManagedAzureAISearchIndex deserializedManagedAzureAISearchIndex
                = new ManagedAzureAISearchIndex(vectorStoreId);
            deserializedManagedAzureAISearchIndex.setName(name);
            deserializedManagedAzureAISearchIndex.setVersion(version);
            deserializedManagedAzureAISearchIndex.setStage(stage);
            deserializedManagedAzureAISearchIndex.setId(id);
            deserializedManagedAzureAISearchIndex.setDescription(description);
            deserializedManagedAzureAISearchIndex.setTags(tags);
            deserializedManagedAzureAISearchIndex.type = type;
            return deserializedManagedAzureAISearchIndex;
        });
    }
}
