// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * DatasetVersion Definition.
 */
@Fluent
public class DatasetVersion implements JsonSerializable<DatasetVersion> {

    /*
     * Dataset type
     */
    @Generated
    private DatasetType type = DatasetType.fromString("DatasetVersion");

    /*
     * [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
     */
    @Generated
    private final String datasetUri;

    /*
     * Indicates if dataset is reference only or managed by dataset service. If true, the underlying data will be
     * deleted when the dataset version is deleted
     */
    @Generated
    private Boolean isReference;

    /*
     * Asset stage
     */
    @Generated
    private String stage;

    /*
     * A unique identifier for the asset, assetId probably?
     */
    @Generated
    private String id;

    /*
     * The name of the resource
     */
    @Generated
    private String name;

    /*
     * The version of the resource
     */
    @Generated
    private String version;

    /*
     * The asset description text.
     */
    @Generated
    private String description;

    /*
     * Tag dictionary. Tags can be added, removed, and updated.
     */
    @Generated
    private Map<String, String> tags;

    /**
     * Creates an instance of DatasetVersion class.
     *
     * @param datasetUri the datasetUri value to set.
     */
    @Generated
    public DatasetVersion(String datasetUri) {
        this.datasetUri = datasetUri;
    }

    /**
     * Get the type property: Dataset type.
     *
     * @return the type value.
     */
    @Generated
    public DatasetType getType() {
        return this.type;
    }

    /**
     * Get the datasetUri property: [Required] Uri of the data. Example:
     * https://go.microsoft.com/fwlink/?linkid=2202330.
     *
     * @return the datasetUri value.
     */
    @Generated
    public String getDatasetUri() {
        return this.datasetUri;
    }

    /**
     * Get the isReference property: Indicates if dataset is reference only or managed by dataset service. If true, the
     * underlying data will be deleted when the dataset version is deleted.
     *
     * @return the isReference value.
     */
    @Generated
    public Boolean isReference() {
        return this.isReference;
    }

    /**
     * Set the isReference property: Indicates if dataset is reference only or managed by dataset service. If true, the
     * underlying data will be deleted when the dataset version is deleted.
     *
     * @param isReference the isReference value to set.
     * @return the DatasetVersion object itself.
     */
    @Generated
    DatasetVersion setIsReference(Boolean isReference) {
        this.isReference = isReference;
        return this;
    }

    /**
     * Get the stage property: Asset stage.
     *
     * @return the stage value.
     */
    @Generated
    public String getStage() {
        return this.stage;
    }

    /**
     * Set the stage property: Asset stage.
     *
     * @param stage the stage value to set.
     * @return the DatasetVersion object itself.
     */
    @Generated
    public DatasetVersion setStage(String stage) {
        this.stage = stage;
        return this;
    }

    /**
     * Get the id property: A unique identifier for the asset, assetId probably?.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: A unique identifier for the asset, assetId probably?.
     *
     * @param id the id value to set.
     * @return the DatasetVersion object itself.
     */
    @Generated
    DatasetVersion setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: The name of the resource.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the resource.
     *
     * @param name the name value to set.
     * @return the DatasetVersion object itself.
     */
    @Generated
    DatasetVersion setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the version property: The version of the resource.
     *
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Set the version property: The version of the resource.
     *
     * @param version the version value to set.
     * @return the DatasetVersion object itself.
     */
    @Generated
    DatasetVersion setVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the description property: The asset description text.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The asset description text.
     *
     * @param description the description value to set.
     * @return the DatasetVersion object itself.
     */
    @Generated
    public DatasetVersion setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the tags property: Tag dictionary. Tags can be added, removed, and updated.
     *
     * @return the tags value.
     */
    @Generated
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: Tag dictionary. Tags can be added, removed, and updated.
     *
     * @param tags the tags value to set.
     * @return the DatasetVersion object itself.
     */
    @Generated
    public DatasetVersion setTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("datasetUri", this.datasetUri);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("stage", this.stage);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatasetVersion from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatasetVersion if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatasetVersion.
     */
    @Generated
    public static DatasetVersion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("uri_file".equals(discriminatorValue)) {
                    return FileDatasetVersion.fromJson(readerToUse.reset());
                } else if ("uri_folder".equals(discriminatorValue)) {
                    return FolderDatasetVersion.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static DatasetVersion fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String datasetUri = null;
            String name = null;
            String version = null;
            DatasetType type = null;
            Boolean isReference = null;
            String stage = null;
            String id = null;
            String description = null;
            Map<String, String> tags = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("datasetUri".equals(fieldName)) {
                    datasetUri = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = DatasetType.fromString(reader.getString());
                } else if ("isReference".equals(fieldName)) {
                    isReference = reader.getNullable(JsonReader::getBoolean);
                } else if ("stage".equals(fieldName)) {
                    stage = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            DatasetVersion deserializedDatasetVersion = new DatasetVersion(datasetUri);
            deserializedDatasetVersion.name = name;
            deserializedDatasetVersion.version = version;
            deserializedDatasetVersion.type = type;
            deserializedDatasetVersion.isReference = isReference;
            deserializedDatasetVersion.stage = stage;
            deserializedDatasetVersion.id = id;
            deserializedDatasetVersion.description = description;
            deserializedDatasetVersion.tags = tags;
            return deserializedDatasetVersion;
        });
    }
}
