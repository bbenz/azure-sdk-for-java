// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.projects.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a reference to a blob for consumption.
 */
@Immutable
public final class AssetCredentialResponse implements JsonSerializable<AssetCredentialResponse> {

    /*
     * Credential info to access the storage account.
     */
    @Generated
    private final BlobReferenceForConsumption blobReferenceForConsumption;

    /**
     * Creates an instance of AssetCredentialResponse class.
     *
     * @param blobReferenceForConsumption the blobReferenceForConsumption value to set.
     */
    @Generated
    private AssetCredentialResponse(BlobReferenceForConsumption blobReferenceForConsumption) {
        this.blobReferenceForConsumption = blobReferenceForConsumption;
    }

    /**
     * Get the blobReferenceForConsumption property: Credential info to access the storage account.
     *
     * @return the blobReferenceForConsumption value.
     */
    @Generated
    public BlobReferenceForConsumption getBlobReferenceForConsumption() {
        return this.blobReferenceForConsumption;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("blobReferenceForConsumption", this.blobReferenceForConsumption);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssetCredentialResponse from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetCredentialResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssetCredentialResponse.
     */
    @Generated
    public static AssetCredentialResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlobReferenceForConsumption blobReferenceForConsumption = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("blobReferenceForConsumption".equals(fieldName)) {
                    blobReferenceForConsumption = BlobReferenceForConsumption.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new AssetCredentialResponse(blobReferenceForConsumption);
        });
    }
}
