// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.projects.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * CosmosDB Vector Store Index Definition.
 */
@Fluent
public final class CosmosDBIndex extends Index {
    /*
     * Type of index
     */
    @Generated
    private IndexType type = IndexType.COSMOS_DB;

    /*
     * Name of connection to CosmosDB
     */
    @Generated
    private final String connectionName;

    /*
     * Name of the CosmosDB Database
     */
    @Generated
    private final String databaseName;

    /*
     * Name of CosmosDB Container
     */
    @Generated
    private final String containerName;

    /*
     * Embedding model configuration
     */
    @Generated
    private final EmbeddingConfiguration embeddingConfiguration;

    /**
     * Creates an instance of CosmosDBIndex class.
     * 
     * @param connectionName the connectionName value to set.
     * @param databaseName the databaseName value to set.
     * @param containerName the containerName value to set.
     * @param embeddingConfiguration the embeddingConfiguration value to set.
     */
    @Generated
    public CosmosDBIndex(String connectionName, String databaseName, String containerName,
        EmbeddingConfiguration embeddingConfiguration) {
        this.connectionName = connectionName;
        this.databaseName = databaseName;
        this.containerName = containerName;
        this.embeddingConfiguration = embeddingConfiguration;
    }

    /**
     * Get the type property: Type of index.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public IndexType getType() {
        return this.type;
    }

    /**
     * Get the connectionName property: Name of connection to CosmosDB.
     * 
     * @return the connectionName value.
     */
    @Generated
    public String getConnectionName() {
        return this.connectionName;
    }

    /**
     * Get the databaseName property: Name of the CosmosDB Database.
     * 
     * @return the databaseName value.
     */
    @Generated
    public String getDatabaseName() {
        return this.databaseName;
    }

    /**
     * Get the containerName property: Name of CosmosDB Container.
     * 
     * @return the containerName value.
     */
    @Generated
    public String getContainerName() {
        return this.containerName;
    }

    /**
     * Get the embeddingConfiguration property: Embedding model configuration.
     * 
     * @return the embeddingConfiguration value.
     */
    @Generated
    public EmbeddingConfiguration getEmbeddingConfiguration() {
        return this.embeddingConfiguration;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public CosmosDBIndex setStage(String stage) {
        super.setStage(stage);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public CosmosDBIndex setDescription(String description) {
        super.setDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public CosmosDBIndex setTags(Map<String, String> tags) {
        super.setTags(tags);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("stage", getStage());
        jsonWriter.writeStringField("description", getDescription());
        jsonWriter.writeMapField("tags", getTags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("connectionName", this.connectionName);
        jsonWriter.writeStringField("databaseName", this.databaseName);
        jsonWriter.writeStringField("containerName", this.containerName);
        jsonWriter.writeJsonField("embeddingConfiguration", this.embeddingConfiguration);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CosmosDBIndex from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CosmosDBIndex if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CosmosDBIndex.
     */
    @Generated
    public static CosmosDBIndex fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String version = null;
            String stage = null;
            String id = null;
            String description = null;
            Map<String, String> tags = null;
            String connectionName = null;
            String databaseName = null;
            String containerName = null;
            EmbeddingConfiguration embeddingConfiguration = null;
            IndexType type = IndexType.COSMOS_DB;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else if ("stage".equals(fieldName)) {
                    stage = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("connectionName".equals(fieldName)) {
                    connectionName = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    databaseName = reader.getString();
                } else if ("containerName".equals(fieldName)) {
                    containerName = reader.getString();
                } else if ("embeddingConfiguration".equals(fieldName)) {
                    embeddingConfiguration = EmbeddingConfiguration.fromJson(reader);
                } else if ("type".equals(fieldName)) {
                    type = IndexType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CosmosDBIndex deserializedCosmosDBIndex
                = new CosmosDBIndex(connectionName, databaseName, containerName, embeddingConfiguration);
            deserializedCosmosDBIndex.setName(name);
            deserializedCosmosDBIndex.setVersion(version);
            deserializedCosmosDBIndex.setStage(stage);
            deserializedCosmosDBIndex.setId(id);
            deserializedCosmosDBIndex.setDescription(description);
            deserializedCosmosDBIndex.setTags(tags);
            deserializedCosmosDBIndex.type = type;

            return deserializedCosmosDBIndex;
        });
    }
}
